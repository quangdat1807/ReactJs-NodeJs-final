{"ast":null,"code":"// import React, { createContext, useState, useEffect } from 'react'\n// const addCartItem = (cartItems, productToAdd) => {\n//     const existingCartItems = cartItems.find(\n//         (cartItem) => cartItem.id === productToAdd.id\n//     );\n//     if (existingCartItems) {\n//         return cartItems.map(\n//             (cartItem) => cartItem.id === productToAdd.id ?\n//             {...cartItem, quantity: cartItem.quantity +1} : cartItem\n//         )\n//     }\n//     return [...cartItems, {...productToAdd, quantity: 1}]\n// }\n// export const CartContext = createContext({\n//     isCartOpen: false,\n//     setIsCartOpen: () => {},\n//     cartItems: [],\n//     addItemToCart: () => {},\n//     cartCount: 0\n// })\n// export const CartProvider = ({children}) => {\n//     const [isCartOpen, setIsCartOpen] = useState(false)\n//     const [cartItems, setCartItems] = useState([])\n//     const [cartCount, setCartCount] = useState(0)\n//     useEffect(() => {\n//         const newCartCount = cartItems.reduce((total, currentItem) => total + currentItem.quantity, 0)\n//         setCartCount(newCartCount);\n//     }, [cartItems]);\n//     const addItemToCart = (productToAdd) => {\n//         setCartItems(addCartItem(cartItems, productToAdd));\n//     }\n//     const value = {isCartOpen, setIsCartOpen, addItemToCart, cartItems, cartCount};\n//     return (\n//         <CartContext.Provider value={value}>{children}</CartContext.Provider>\n//     )\n// }","map":{"version":3,"names":[],"sources":["D:/TMA-React/demoTest/Demo/client/src/contexts/CartContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react'\r\n\r\n// const addCartItem = (cartItems, productToAdd) => {\r\n//     const existingCartItems = cartItems.find(\r\n//         (cartItem) => cartItem.id === productToAdd.id\r\n//     );\r\n\r\n//     if (existingCartItems) {\r\n//         return cartItems.map(\r\n//             (cartItem) => cartItem.id === productToAdd.id ?\r\n//             {...cartItem, quantity: cartItem.quantity +1} : cartItem\r\n//         )\r\n//     }\r\n\r\n//     return [...cartItems, {...productToAdd, quantity: 1}]\r\n// }\r\n\r\n// export const CartContext = createContext({\r\n//     isCartOpen: false,\r\n//     setIsCartOpen: () => {},\r\n//     cartItems: [],\r\n//     addItemToCart: () => {},\r\n//     cartCount: 0\r\n// })\r\n\r\n// export const CartProvider = ({children}) => {\r\n//     const [isCartOpen, setIsCartOpen] = useState(false)\r\n//     const [cartItems, setCartItems] = useState([])\r\n//     const [cartCount, setCartCount] = useState(0)\r\n\r\n//     useEffect(() => {\r\n//         const newCartCount = cartItems.reduce((total, currentItem) => total + currentItem.quantity, 0)\r\n//         setCartCount(newCartCount);\r\n//     }, [cartItems]);\r\n\r\n//     const addItemToCart = (productToAdd) => {\r\n//         setCartItems(addCartItem(cartItems, productToAdd));\r\n//     }\r\n\r\n//     const value = {isCartOpen, setIsCartOpen, addItemToCart, cartItems, cartCount};\r\n\r\n//     return (\r\n//         <CartContext.Provider value={value}>{children}</CartContext.Provider>\r\n//     )\r\n// }\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}